// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("PlayerStatus")));
bytes32 constant PlayerStatusTableId = _tableId;

struct PlayerStatusData {
  uint32 life;
  uint32 mana;
  uint32 level;
  bytes32[] items;
}

library PlayerStatus {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.UINT32;
    _schema[1] = SchemaType.UINT32;
    _schema[2] = SchemaType.UINT32;
    _schema[3] = SchemaType.BYTES32_ARRAY;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "playerId";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "life";
    fieldNames[1] = "mana";
    fieldNames[2] = "level";
    fieldNames[3] = "items";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get life */
  function getLife(bytes32 playerId) internal view returns (uint32 life) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get life (using the specified store) */
  function getLife(IStore _store, bytes32 playerId) internal view returns (uint32 life) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set life */
  function setLife(bytes32 playerId, uint32 life) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((life)), getValueSchema());
  }

  /** Set life (using the specified store) */
  function setLife(IStore _store, bytes32 playerId, uint32 life) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((life)), getValueSchema());
  }

  /** Get mana */
  function getMana(bytes32 playerId) internal view returns (uint32 mana) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get mana (using the specified store) */
  function getMana(IStore _store, bytes32 playerId) internal view returns (uint32 mana) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set mana */
  function setMana(bytes32 playerId, uint32 mana) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((mana)), getValueSchema());
  }

  /** Set mana (using the specified store) */
  function setMana(IStore _store, bytes32 playerId, uint32 mana) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((mana)), getValueSchema());
  }

  /** Get level */
  function getLevel(bytes32 playerId) internal view returns (uint32 level) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get level (using the specified store) */
  function getLevel(IStore _store, bytes32 playerId) internal view returns (uint32 level) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set level */
  function setLevel(bytes32 playerId, uint32 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((level)), getValueSchema());
  }

  /** Set level (using the specified store) */
  function setLevel(IStore _store, bytes32 playerId, uint32 level) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((level)), getValueSchema());
  }

  /** Get items */
  function getItems(bytes32 playerId) internal view returns (bytes32[] memory items) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Get items (using the specified store) */
  function getItems(IStore _store, bytes32 playerId) internal view returns (bytes32[] memory items) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3, getValueSchema());
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /** Set items */
  function setItems(bytes32 playerId, bytes32[] memory items) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    StoreSwitch.setField(_tableId, _keyTuple, 3, EncodeArray.encode((items)), getValueSchema());
  }

  /** Set items (using the specified store) */
  function setItems(IStore _store, bytes32 playerId, bytes32[] memory items) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    _store.setField(_tableId, _keyTuple, 3, EncodeArray.encode((items)), getValueSchema());
  }

  /** Get the length of items */
  function lengthItems(bytes32 playerId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 3, getValueSchema());
    unchecked {
      return _byteLength / 32;
    }
  }

  /** Get the length of items (using the specified store) */
  function lengthItems(IStore _store, bytes32 playerId) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 3, getValueSchema());
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * Get an item of items
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemItems(bytes32 playerId, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        3,
        getValueSchema(),
        _index * 32,
        (_index + 1) * 32
      );
      return (Bytes.slice32(_blob, 0));
    }
  }

  /**
   * Get an item of items (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemItems(IStore _store, bytes32 playerId, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(
        _tableId,
        _keyTuple,
        3,
        getValueSchema(),
        _index * 32,
        (_index + 1) * 32
      );
      return (Bytes.slice32(_blob, 0));
    }
  }

  /** Push an element to items */
  function pushItems(bytes32 playerId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    StoreSwitch.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)), getValueSchema());
  }

  /** Push an element to items (using the specified store) */
  function pushItems(IStore _store, bytes32 playerId, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    _store.pushToField(_tableId, _keyTuple, 3, abi.encodePacked((_element)), getValueSchema());
  }

  /** Pop an element from items */
  function popItems(bytes32 playerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    StoreSwitch.popFromField(_tableId, _keyTuple, 3, 32, getValueSchema());
  }

  /** Pop an element from items (using the specified store) */
  function popItems(IStore _store, bytes32 playerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    _store.popFromField(_tableId, _keyTuple, 3, 32, getValueSchema());
  }

  /**
   * Update an element of items at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateItems(bytes32 playerId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 3, _index * 32, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /**
   * Update an element of items (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateItems(IStore _store, bytes32 playerId, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 3, _index * 32, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /** Get the full data */
  function get(bytes32 playerId) internal view returns (PlayerStatusData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 playerId) internal view returns (PlayerStatusData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 playerId, uint32 life, uint32 mana, uint32 level, bytes32[] memory items) internal {
    bytes memory _data = encode(life, mana, level, items);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 playerId,
    uint32 life,
    uint32 mana,
    uint32 level,
    bytes32[] memory items
  ) internal {
    bytes memory _data = encode(life, mana, level, items);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(bytes32 playerId, PlayerStatusData memory _table) internal {
    set(playerId, _table.life, _table.mana, _table.level, _table.items);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 playerId, PlayerStatusData memory _table) internal {
    set(_store, playerId, _table.life, _table.mana, _table.level, _table.items);
  }

  /**
   * Decode the tightly packed blob using this table's schema.
   * Undefined behaviour for invalid blobs.
   */
  function decode(bytes memory _blob) internal pure returns (PlayerStatusData memory _table) {
    // 12 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 12));

    _table.life = (uint32(Bytes.slice4(_blob, 0)));

    _table.mana = (uint32(Bytes.slice4(_blob, 4)));

    _table.level = (uint32(Bytes.slice4(_blob, 8)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 12) {
      // skip static data length + dynamic lengths word
      uint256 _start = 44;
      uint256 _end;
      unchecked {
        _end = 44 + _encodedLengths.atIndex(0);
      }
      _table.items = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(uint32 life, uint32 mana, uint32 level, bytes32[] memory items) internal pure returns (bytes memory) {
    PackedCounter _encodedLengths;
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(items.length * 32);
    }

    return abi.encodePacked(life, mana, level, _encodedLengths.unwrap(), EncodeArray.encode((items)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 playerId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 playerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 playerId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = playerId;

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}
